@page "/centerdashboard/{id:int}/ViewCourts"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject ICourtService courtService
@inject NavigationManager NavigationManager


<MudTable Items="@courts" Filter="new Func<Court, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Courts</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Court Type</MudTh>
        <MudTh>Court Number</MudTh>
        <MudTh>Court Sponsor</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Court Type">@context.CourtType</MudTd>
        <MudTd DataLabel="Court Number">@context.CourtNumber</MudTd>
        <MudTd DataLabel="Court Sponsor">@context.CourtSponsor</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteCourt(@context.CenterId, @context.CourtNumber))"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string msg = "";
    private string searchString1 = "";
    private Court selectedItem1 = null;
    private HashSet<Court> selectedItems = new HashSet<Court>();
    [Parameter]
    public int Id { get; set; }

    private List<Court> courts = new List<Court>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            courts = await courtService.GetCourtsAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private bool FilterFunc1(Court court) => FilterFunc(court, searchString1);

            private bool FilterFunc(Court court, string searchString)
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (court.CourtSponsor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if ($"{court.Id} {court.CourtNumber}".Contains(searchString))
                    return true;
                return false;
            }

    private void DeleteCourt(int centerId, int courtNumber)
    {
        try
        {
            courtService.DeleteCourt(centerId, courtNumber);
            courts.Remove(courts.Find(court => court.CenterId == centerId && court.CourtNumber == courtNumber));
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
        }
