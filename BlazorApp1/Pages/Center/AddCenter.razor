@page "/addcenter"
@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@inject ICenterService CenterService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components

<PageTitle>Add Center</PageTitle>

<MudPaper Outlined="false" Class="border-none mb-2" Elevation="0">
<MudText Typo="Typo.h2">Add Center</MudText>
</MudPaper>

<EditForm Model="@centerModel" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h4">General Information</MudText>
                <MudTextField Label="Center Name"
                              @bind-Value="centerModel.CenterName" For="@(() => centerModel.CenterName)"/>
                <MudNumericField HideSpinButtons="true" Label="Zip Code" Class="mt-3"
                              @bind-Value="centerModel.ZipCode" For="@(() => centerModel.ZipCode)"/>
                <MudTextField Label="City" Class="mt-3"
                              @bind-Value="centerModel.City" For="@(() => centerModel.City)"/>
                <MudTextField Label="Address" Class="mt-3"
                              @bind-Value="centerModel.Address" For="@(() => centerModel.Address)"/>

                <MudText Typo="Typo.h4" Class="mt-8">Courts 
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="ToggleFormVisibility"/>
                </MudText>
                
@if (isFormVisible)
{
    <MudPaper Elevation="0" Class="d-flex flex-column gap-4 border-none">
        @foreach (var row in courtRows)
        {
            <div class="d-flex gap-4">
                <MudSelect T="string" Label="Court Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="row.CourtType">
                    <MudSelectItem Value="@("Single")" />
                    <MudSelectItem Value="@("Double")" />
                </MudSelect>
                <MudTextField Label="Court Number" @bind-Value="row.CourtNumber" For="@(() => row.CourtNumber)" />
                <MudTextField Label="Court Sponsor" @bind-Value="row.CourtSponsor" For="@(() => row.CourtSponsor)" />
            </div>
        }

        <div class="d-flex justify-space-between gap-4">
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Primary" Size="Size.Medium" aria-label="deleterow" OnClick="DeleteCourtRow"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Medium" aria-label="addrow" OnClick="AddCourtRow"></MudIconButton>
        </div>
    </MudPaper>
}
                
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
                </MudCardActions>
                
                
            </MudCardContent>
        </MudCard>
    </MudItem>
    
    
    
    
</MudGrid>
</EditForm>






@code {

    AddCenterForm centerModel = new AddCenterForm();

    bool success;
    private bool isFormVisible = false;

    public class AddCenterForm
    {
        [Required]
        public string CenterName { get; set; }

        [Required]
        public string ZipCode { get; set; }

        [Required]
        public string City { get; set; }

        [Required]
        public string Address { get; set; }
        
        public List<CourtCreationDTO> Courts { get; set; }
    }
    
    public class CourtModel
    {
        [Required]
        public string CourtType { get; set; }
        [Required]
        public string CourtNumber { get; set; }
        public string CourtSponsor { get; set; }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        Create();
        StateHasChanged();
    }

    private async Task Create()
    {
        try
        {
            ConvertRowsToCourt();
            CenterService.CreateCenter(new CenterCreationDTO(centerModel.CenterName, int.Parse(centerModel.ZipCode), 
                                              centerModel.City, centerModel.Address, centerModel.Courts));
            
            centerModel.CenterName = "";
            centerModel.ZipCode = "";
            centerModel.City = "";
            centerModel.Address = "";
            centerModel.Courts = new List<CourtCreationDTO>();
            courtRows = new List<CourtModel> { new CourtModel() };
            isFormVisible = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            centerModel.Courts = new List<CourtCreationDTO>();
        }
    }


    private void ToggleFormVisibility()
    {
        isFormVisible = !isFormVisible;
    }
    

    private List<CourtModel> courtRows = new List<CourtModel> { new CourtModel() };

    private void ConvertRowsToCourt()
    {
        centerModel.Courts = new List<CourtCreationDTO>();
        foreach (var row in courtRows)
        {
            if (string.IsNullOrEmpty(row.CourtType) && string.IsNullOrEmpty(row.CourtNumber) && string.IsNullOrEmpty(row.CourtSponsor))
                continue;
            if (string.IsNullOrEmpty(row.CourtType) || string.IsNullOrEmpty(row.CourtNumber) || string.IsNullOrEmpty(row.CourtSponsor))
            {
                throw new ArgumentException("Tag dig sammen");
            }
                centerModel.Courts.Add(new CourtCreationDTO(row.CourtType, int.Parse(row.CourtNumber), row.CourtSponsor));
            }
    }

    private void AddCourtRow()
    {
        courtRows.Add(new CourtModel());
    }

    private void DeleteCourtRow()
    {
        courtRows[courtRows.Count - 1].CourtType = "Empty";
        courtRows[courtRows.Count - 1].CourtNumber = "0";
        courtRows[courtRows.Count - 1].CourtSponsor = "Empty";
        courtRows.RemoveAt(courtRows.Count - 1);
    }

}