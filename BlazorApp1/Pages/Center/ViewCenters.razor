@page "/ViewCenters"
@using HttpClients.ClientInterfaces
@inject ICenterService CenterService
@using global::Shared.Models
@using BlazorApp1.Pages.Components
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService


<PageTitle>View Centers</PageTitle>


<MudTable Items="@centers" Filter="new Func<Center,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Centers</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>No. of Courts</MudTh>
        <MudTh>City</MudTh>
        <MudTh>Zip Code</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Name" @onclick="() => AccessCenterDashboard(context.Id)">@context.Name</MudTd>
        <MudTd DataLabel="Courts">@context.Courts.Count</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="Zip Code">@context.ZipCode</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.ModeEditOutline" Color="Color.Primary" OnClick="@(() => ShowEditDialog(@context))"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => ShowDeleteConfirmation(@context.Id, @context.Name))"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string msg = "";
    private string searchString1 = "";
    private Center selectedItem1 = null;
    private HashSet<Center> selectedItems = new HashSet<Center>();
    
    private int centerIdToDelete;
    private string centerNameToDelete;

    private List<Center> centers = new List<Center>();
    private Center selectedCenterForEdit;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            centers = await CenterService.GetCentersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private void AccessCenterDashboard(int centerId)
    {
        NavigationManager.NavigateTo($"/CenterDashboard/{centerId}");
    }

    private bool FilterFunc1(Center center) => FilterFunc(center, searchString1);

    private bool FilterFunc(Center center, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (center.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{center.Id} {center.ZipCode}".Contains(searchString))
            return true;
        return false;
    }
    
    private async Task ShowDeleteConfirmation(int id, string name)
    {
    centerIdToDelete = id;
    centerNameToDelete = name;

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, $"Are you sure you want to delete {centerNameToDelete}?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions()
        {
            CloseButton = true, 
        };

        var result = await DialogService.Show<Dialog>("Delete Confirmation", parameters, options).Result;

    if (result.Cancelled)
    {
        // Do nothing
    }
    else
    {
        // User confirmed deletion
        try
        {
            CenterService.DeleteCenter(centerIdToDelete);
            centers.RemoveAll(c => c.Id == centerIdToDelete);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
    private async Task ShowEditDialog(Center center)
    {
        Console.WriteLine("CALLED");

        if (center == null)
        {
    // Handle the case where the provided center is null
            Console.WriteLine("Center is null");
            return;
        }

        var parameters = new DialogParameters();
        parameters.Add("SelectedCenter", center);

        var dialog = DialogService.Show<EditCenterDialog>("Edit Center", parameters);

        var result = await dialog.Result;

        if (result != null && !result.Cancelled)
        {
            Console.WriteLine("Result is not null and not cancelled");

            if (result.Data is Center updatedCenter)
            {
                Console.WriteLine($"Updated Center: {JsonSerializer.Serialize(updatedCenter)}");

    // Ensure that updatedCenter is not null before using it
                if (updatedCenter != null)
                {
    // Update the list or take any other necessary actions
    // Example: Update the existing center in the list
                    var existingCenter = centers.FirstOrDefault(c => c.Id == updatedCenter.Id);
                    if (existingCenter != null)
                    {
                        existingCenter.Name = updatedCenter.Name;
                        existingCenter.ZipCode = updatedCenter.ZipCode;
                        existingCenter.City = updatedCenter.City;
                        existingCenter.Address = updatedCenter.Address;

                        Console.WriteLine("List updated successfully");
                    }
                    else
                    {
                        Console.WriteLine("Existing center is null");
                    }
                }
                else
                {
                    Console.WriteLine("Updated center is null");
                }

                StateHasChanged(); // Ensure UI updates
            }
            else
            {
                Console.WriteLine("Data property of result is not a Center");
            }
        }
        else
        {
            Console.WriteLine("Result is null or cancelled");
        }
    }

    
    
}