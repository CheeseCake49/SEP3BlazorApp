@page "/ViewCenters"
@using HttpClients.ClientInterfaces
@inject ICenterService CenterService
@using global::Shared.Models
@using BlazorApp1.Pages.Components
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService


<PageTitle>View Centers</PageTitle>

<AuthorizeView Roles="Admin, Customer">
    <MudTable Items="@centers" Filter="new Func<Center, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Centers</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>No. of Courts</MudTh>
            <MudTh>City</MudTh>
            <MudTh>Zip Code</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="selected">
            <MudTd DataLabel="ID">@selected.Id</MudTd>
            <MudTd DataLabel="Name" @onclick="() => AccessCenterDashboard(selected.Id)">@selected.Name</MudTd>
            <MudTd DataLabel="Courts">@selected.Courts.Count</MudTd>
            <MudTd DataLabel="City">@selected.City</MudTd>
            <MudTd DataLabel="Zip Code">@selected.ZipCode</MudTd>
                <MudTd>
                    <MudIconButton Disabled="deleteButtonsDisabled" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => ShowDeleteConfirmation(@selected.Id, @selected.Name))"></MudIconButton>
                </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
    private string msg = "";
    private string searchString1 = "";
    private Center selectedItem1 = null;
    private HashSet<Center> selectedItems = new HashSet<Center>();
    
    private int centerIdToDelete;
    private string centerNameToDelete;

    private List<Center> centers = new List<Center>();
    private bool deleteButtonsDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationState;
            var authUser = authState.User;
            List<Center> allCenters = await CenterService.GetCentersAsync();
            if (authUser.IsInRole("Admin"))
            {
                centers = allCenters;
                deleteButtonsDisabled = false;
            }
            else
            {
                foreach (Center center in allCenters)
                {
                    if (authUser.HasClaim($"Center{center.Id}", center.Id.ToString()))
                    {
                        centers.Add(center);
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private void AccessCenterDashboard(int centerId)
    {
        NavigationManager.NavigateTo($"/CenterDashboard/{centerId}");
    }

    private bool FilterFunc1(Center center) => FilterFunc(center, searchString1);

    private bool FilterFunc(Center center, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (center.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{center.Id} {center.ZipCode}".Contains(searchString))
            return true;
        return false;
    }
    
    private async Task ShowDeleteConfirmation(int id, string name)
    {
    centerIdToDelete = id;
    centerNameToDelete = name;

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, $"Are you sure you want to delete {centerNameToDelete}?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions()
        {
            CloseButton = true, 
        };

        var result = await DialogService.Show<Dialog>("Delete Confirmation", parameters, options).Result;

    if (result.Cancelled)
    {
        // Do nothing
    }
    else
    {
        // User confirmed deletion
        try
        {
            CenterService.DeleteCenter(centerIdToDelete);
            centers.RemoveAll(c => c.Id == centerIdToDelete);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
    
}