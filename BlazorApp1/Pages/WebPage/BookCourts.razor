@page "/BookCourts/{id:int}"
@using HttpClients.ClientInterfaces
@using global::Shared.Models
@using BlazorApp1.Pages.Components
@inject ITimeSlotService TimeSlotService
@inject ICourtService CourtService
@inject ICenterService CenterService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer Class="d-flex justify-center">
    <MudStack>
        
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
            <MudCard Style="width: 33%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@accessedCenter.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">@accessedCenter.Address</MudText>
                    <MudText Typo="Typo.body1">@accessedCenter.ZipCode @accessedCenter.City</MudText>
                </MudCardContent>
            </MudCard>
            <MudCard Style="width: 33%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Opening Hours</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">Monday-Sunday: 06:00-24:00</MudText>
                </MudCardContent>
            </MudCard>
            <MudCard Style="width: 33%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Courts</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (Court court in courts)
                    {
                        <MudText Typo="Typo.body1">@court.CourtType-court @court.CourtNumber</MudText>
                    }
                </MudCardContent>
            </MudCard>
            <MudDatePicker PickerVariant="PickerVariant.Static" Rounded="true" Elevation="1" Date="selectedDate" DateChanged="ClearSelection" />
        </MudStack>

        <MudChipSet @bind-SelectedChips="selected" MultiSelection="true">
            <MudTable Elevation="1" Items="@courts" Hover="false" Dense="true"
                      LoadingProgressColor="Color.Info" Bordered="true" HeaderClass="table-head-bordered">
                <HeaderContent>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">6</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">7</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">8</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">9</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">10</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">11</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">12</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">13</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">14</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">15</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">16</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">17</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">18</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">19</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">20</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">21</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">22</MudTh>
                    <MudTh Class="pa-0 ma-0" Style="text-align: center">23</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @foreach (var timeSlot in context.TimeSlots)
                    {
                        if (timeSlot.StartTime.Date == selectedDate) {
                            int index = context.TimeSlots.IndexOf(timeSlot);
                            if (index % 2 == 0 && index < context.TimeSlots.Count - 1)
                            {
                                <MudTd Class="pa-0">

                                    <MudChip
                                        Class="d-inline-flex pa-0 ma-0 border-solid border rounded-0"
                                        Style="width: 25px"
                                        Elevation="0"
                                        Value="@timeSlot.StartTime.ToString("t")"
                                        Tag="timeSlot"
                                        Variant="Variant.Filled"
                                        Color="timeSlot.IsBooked ? Color.Error : Color.Secondary"
                                        SelectedColor="Color.Info"
                                        Disabled="timeSlot.IsBooked">
                                    </MudChip>

                                    <MudChip
                                        Class="d-inline-flex pa-0 ma-0 border-solid border rounded-0"
                                        Style="width: 25px"
                                        Elevation="0"
                                        Value="@context.TimeSlots[index + 1].StartTime.ToString("t")"
                                        Tag="context.TimeSlots[index + 1]"
                                        Variant="Variant.Filled"
                                        Color="context.TimeSlots[index + 1].IsBooked ? Color.Error : Color.Secondary"
                                        SelectedColor="Color.Info"
                                        Disabled="context.TimeSlots[index + 1].IsBooked">
                                    </MudChip>

                                </MudTd>
                            }
                            else if (index % 2 == 0 && index == context.TimeSlots.Count - 1)
                            {
                                <MudTd Class="pa-0">

                                    <MudChip
                                        Class="d-inline-flex pa-0 ma-0 border-solid border rounded-0"
                                        Style="width: 25px"
                                        Elevation="0"
                                        Value="@timeSlot.StartTime.ToString("t")"
                                        Variant="Variant.Filled"
                                        Color="timeSlot.IsBooked ? Color.Error : Color.Secondary"
                                        SelectedColor="Color.Info"
                                        Disabled="timeSlot.IsBooked">
                                    </MudChip>

                                </MudTd>
                            }
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudChipSet>

        <div class="d-flex justify-center mt-2">
            @if (selected != null && selected.Length > 0)
            {
                <MudText>Time slots selected: @string.Join(", ", selected.Select(chip => chip.Value))</MudText>
            }
            else
            {
                <MudText>No time slots selected.</MudText>
            }
        </div>
        
    </MudStack>
</MudContainer>
<MudStack AlignItems="AlignItems.Center">
    <MudButton @onclick="CreateBooking" EndIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Disabled="selected == null ? true : selected.Length == 0 ? true : false">
        Book
    </MudButton>
</MudStack>

@code { 
    private List<Court> courts = new();
    MudChip[] selected;
    [Parameter]
    public int Id { get; set; }
    private Center accessedCenter = new();
    public DateTime? selectedDate { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            accessedCenter = await CenterService.GetByIdAsync(Id);
            selectedDate = DateTime.Today;
            courts = await CourtService.GetCourtsAsync(Id);
            foreach (Court court in courts)
            {
                court.TimeSlots = await TimeSlotService.GetTimeSlots(court.Id);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public void ClearSelection(DateTime? newDate)
    {
        selectedDate = newDate;
        selected = null;
        StateHasChanged();
    }

    private async Task CreateBooking()
    {
        var authState = await authenticationState;
        var authUser = authState.User;
        if (!(authUser.IsInRole("User") || authUser.IsInRole("Customer") || authUser.IsInRole("Admin")))
        {
            NavigationManager.NavigateTo("/Login");
        }
        else {
            List<Court> selectedCourts = new();
            foreach (var court in courts)
            {
                foreach (var chip in selected)
                {
                    if (court.TimeSlots.Contains((TimeSlot)chip.Tag!))
                    {
                        selectedCourts.Add(court);
                        break;
                    }
                }
            }
            
            var parameters = new DialogParameters();
            parameters.Add("SelectedChips", selected);
            parameters.Add("SelectedCourts", selectedCourts);
            parameters.Add("authUser", authUser);
        
            var dialog = DialogService.Show<BookingCheckoutDialog>("Create Booking", parameters);

            var result = await dialog.Result;
        
            if (!result.Canceled)
            {
                NavigationManager.NavigateTo("/");
                StateHasChanged();
            }
        }
    }
}